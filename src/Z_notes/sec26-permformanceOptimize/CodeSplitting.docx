VID 267

Right now, we have everything downloading as one big main chunk, as we saw in the last lesson, the
reason for this is because of the tool called WebPack, 
that actually helps us bundle together all of our files whenever we see these imports that we've
written throughout this course so far, we're actually using what's called a static import, meaning
that when WebPack encounters this file, it sees that we're importing in homepage, shop page, Sinon page,
all these components, all these files.
And it just bundles them all together because we want to statically include them together.

Instead, what we want to leverage is the new dynamic import syntax.
Dynamic import means that it pulls in the import almost like a promise.
So you can imagine where we only want to import the file and then load it when necessary.
That's pretty much what dynamic import means.
Now this is a feature that actually gets included due to a Babel configuration that create react that
hides away from us.

Leveraging it in react is actually really easy because we use what's called react lazy and react lazy
is something we simply import in from 'react'
now with react lazy. We're able to wrap our components inside of the lazy function that we got back from react.
And we are able to use it really well in conjunction with react router because react router by default
allows us to support code splitting, which is what we're trying to do, split up our code into chunks.
So all we would do is just end up replacing any place where we have <Route> components with these new lazy
loaded components.
What will end up happening is that whenever a user navigates to this route and then we need to actually
load this route, Webpack ahead of time during the build step will have already chunked our code accordingly
using that new lazy loaded function.
So that what happens is that when they hit home, they will get the home page chunk.
When they head shop, they'll get the shot page chunk.
When they have the out, they'll get the checkout page chunk.

And we're actually able to leverage this at any point where there are routes.
So as you remember inside of our shop page, we also have routes.
So here we can also lazy load these components as well in the same syntax we're going to write in the
upcoming lessons.

But mainly what we're doing is we're leveraging React lazy with react router so that we download chunks
at the Route level instead of at a certain time where it might seem awkward and discombobulated.
Routing seems to make the most sense at the place where we need to add chunking.
So I just want to take this moment to take a quick high level look at what we're going to do now.
The actual implementation of it is very simple and we'll see that in the next lesson.

VID 268................................................................................
The React.lazy function lets you render a dynamic import as a regular component.

Before:
import OtherComponent from './OtherComponent';

After:
const OtherComponent = React.lazy(() => import('./OtherComponent'));

This will automatically load the bundle containing the OtherComponent when this component is first rendered.
React.lazy takes a function that must call a dynamic import(). 
This must return a Promise which resolves to a module with a default export containing a React component.

Suspense is a new component that react released that allows you to wrap any component in
your application that might be rendering asynchronous components so lazy loading components, it's actually
meant to be used with react lazy.
The lazy component should then be rendered inside a Suspense component,
which allows us to show some fallback content (such as a loading indicator) while we’re waiting for the lazy component to load.

import React, { Suspense } from 'react';

const OtherComponent = React.lazy(() => import('./OtherComponent'));

function MyComponent() {
  return (
    <div>
      <Suspense fallback={<div>Loading...</div>}>
        <OtherComponent />
      </Suspense>
    </div>
  );
}
The fallback prop must be passed which accepts any React elements(components) that you want to render while waiting for the component to load. 
You can place the Suspense component anywhere above the lazy component. You can even wrap multiple lazy components with a single Suspense component.

import React, { Suspense } from 'react';

const OtherComponent = React.lazy(() => import('./OtherComponent'));
const AnotherComponent = React.lazy(() => import('./AnotherComponent'));

function MyComponent() {
  return (
    <div>
      <Suspense fallback={<div>Loading...</div>}>
        <section>
          <OtherComponent />
          <AnotherComponent />
        </section>
      </Suspense>
    </div>
  );
}


VID 270...................................................................................
Error boundaries
If the other module fails to load (for example, due to network failure), it will trigger an error. 
You can handle these errors to show a nice user experience and manage recovery with Error Boundaries. 
Once you’ve created your Error Boundary, you can use it anywhere above your lazy components to display an error state when there’s a network error.

import React, { Suspense } from 'react';
import MyErrorBoundary from './MyErrorBoundary';

const OtherComponent = React.lazy(() => import('./OtherComponent'));
const AnotherComponent = React.lazy(() => import('./AnotherComponent'));

const MyComponent = () => (
  <div>
    <MyErrorBoundary>
      <Suspense fallback={<div>Loading...</div>}>
        <section>
          <OtherComponent />
          <AnotherComponent />
        </section>
      </Suspense>
    </MyErrorBoundary>
  </div>
);

Now, this means that if the connection suddenly stops or slows down and throws an error of some kind,
Well, we're not going to get anything back and our spinner is going to hang indefinitely.
A class component becomes an error boundary if it defines either (or both) of the lifecycle methods static getDerivedStateFromError() or componentDidCatch(). Use static getDerivedStateFromError() to render a fallback UI after an error has been thrown. Use componentDidCatch() to log error information.

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    // Update state so the next render will show the fallback UI.
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    // You can also log the error to an error reporting service
    logErrorToMyService(error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return <h1>Something went wrong.</h1>;
    }

    return this.props.children; 
  }
}
Then you can use it as a regular component:

<ErrorBoundary>
  <MyWidget />
</ErrorBoundary>
Error boundaries work like a JavaScript catch {} block, but for components. Only class components can be error boundaries. In practice, most of the time you’ll want to declare an error boundary component once and use it throughout your application.

Note that error boundaries only catch errors in the components below them in the tree. 